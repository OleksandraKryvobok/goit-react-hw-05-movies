{"version":3,"file":"static/js/207.8ae7e6c2.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/Home.jsx","pages/MovieDetails.jsx","pages/Movies.jsx","services/movies-api.js"],"sourcesContent":["import { lazy, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from \"services/movies-api\";\n\nconst CastList = lazy(() => import(\"components/CastList\"));\n\nexport const abortControllerCast = new AbortController();\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        async function fetchMovieCast() {\n            try {\n                const fetchedCast = await fetchCast(id);\n\n                if(fetchedCast.cast.length === 0) {\n                    throw new Error(\"We don't have any actors for this movie\");\n                };\n\n                setCast(fetchedCast.cast);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n\n        fetchMovieCast();\n\n        return () => {\n            abortControllerCast.abort();\n        };\n    }, [id]);\n\n    return (\n        <>\n            <CastList cast={cast}/>\n            {error && <div>{error}</div>}\n        </>\n    )\n};\n\nexport default Cast;","import { lazy, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchReviews } from \"services/movies-api\";\n\nconst ReviewsList = lazy(() => import('../ReviewsList/ReviewsList'));\n\nexport const abortControllerReviews = new AbortController();\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [error, setError] = useState(null);\n    const { id } = useParams();\n\n    useEffect(() => {\n        async function fetchMovieReviews() {\n            try {\n                const fetchedReviews = await fetchReviews(id);\n\n                if(fetchedReviews.results.length === 0) {\n                    throw new Error(\"We don't have any reviews for this movie\");\n                };\n\n                setReviews(fetchedReviews.results);\n            } catch (error) {\n                setError(error.message);\n            };\n        };\n        \n        fetchMovieReviews();\n\n        return () => {\n            abortControllerReviews.abort();\n        };\n    }, [id]);\n\n    return (\n        <>\n            <ReviewsList reviews={reviews}/>\n            {error && <div>{error}</div>}\n        </>\n    );\n};\nexport default Reviews;","import { lazy, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { fetchTrendingMovies } from \"services/movies-api\";\nimport { fetchSearchedMovies } from \"services/movies-api\";\n\nconst TrendingMoviesList = lazy(() => import(\"components/TrendingMoviesList\"));\n\nexport const abortControllerHome = new AbortController();\n\nconst Home = () => {\n   const [trendingMovies, setTrendingMovies] = useState([]);\n   const [error, setError] = useState(null);\n   const location = useLocation();\n\n   useEffect(() => {\n      async function fetchMovies() {\n         try {\n            const movies = await fetchTrendingMovies();\n            if(movies.length === 0) {\n               throw new Error('There are no trending movies today');\n            };\n            setTrendingMovies(movies.results);\n         } catch (error) {\n         setError(error.message);\n         };\n      };\n\n      fetchMovies();\n\n      return () => {\n         abortControllerHome.abort();\n      };\n   }, []);\n\n   fetchSearchedMovies();\n\n   return (\n      <>\n         <h1>Trending today!</h1>\n         <TrendingMoviesList trendingMovies={trendingMovies} location={location} />\n         {error && <div error={error.message}></div>}\n      </>      \n   );\n};\n\nexport default Home;\n","import { useParams } from \"react-router-dom\";\nimport { fetchMovie } from \"services/movies-api\";\nimport { useEffect, useState, lazy } from \"react\";\n\nconst MovieInfo = lazy(() => import(\"../components/MovieInfo\"));\n\nexport const abortControllerSearchedMovies = new AbortController();\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const { id } = useParams();\n    \n    useEffect(() => {\n        setLoading(true);\n        async function fetchMovieById() {\n            try {\n                const movie = await fetchMovie(id);\n\n                if(!movie) {\n                    throw new Error(\"We don't have information about this film\");\n                }\n                setMovie(movie);\n                setLoading(false);\n            } catch (error) {\n                setError(error.message);\n                setLoading(false);\n            };\n        };\n\n        fetchMovieById();\n\n        return () => {\n            abortControllerSearchedMovies.abort();\n        }\n    }, [id]);\n\n    return (\n        <>\n            <MovieInfo movieDetails={movie} />\n            {loading && <div>Loading...</div>}\n            {error && <div>{error}</div>}\n        </>\n    );\n};\n\nexport default MovieDetails;","import { lazy, useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport { fetchSearchedMovies } from \"services/movies-api\";\n\nconst SearchBar = lazy(() => import(\"../components/SearchBar\"));\nconst SearchedMovies = lazy(() => import(\"../components/SearchedMovies\"));\n\nexport const abortControllerMovies = new AbortController();\n\nconst Movies = () => {\n    const [fetchedMovies, setFetchedMovies] = useState([]);\n    const [queryMovie, setQueryMovie] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const location = useLocation();\n    const queryValue = searchParams.get('query');\n\n    useEffect(() => {\n        setQueryMovie(queryValue);\n    }, [queryValue]);\n\n    useEffect(() => {\n        if(!queryMovie) {\n            setFetchedMovies([]);\n            return;\n        };\n\n        setLoading(true);\n\n        async function fetchMovies() {\n            try {\n                const searchedMoviesList = await fetchSearchedMovies(queryMovie);\n                if(searchedMoviesList.results.length === 0) {\n                    throw new Error(\"We don't have any movies for your request\");\n                };\n                 \n                setFetchedMovies(searchedMoviesList.results);\n                setError(null);\n                setLoading(false);\n            } catch (error) {\n                setError(error.message);\n                setLoading(false);\n            };\n        }\n\n        fetchMovies();\n\n        return () => {\n            abortControllerMovies.abort();\n        };\n    }, [queryMovie]);\n\n    const handleSubmit = (inputValue) => {\n        const query = inputValue !== '' ? {query: inputValue} : {};\n        setSearchParams(query);\n    };\n\n    return (\n        <>\n            <SearchBar onFormSubmit={handleSubmit} />\n            {!error && <SearchedMovies moviesList={fetchedMovies} location={location} />}\n            {loading && <div>Loading...</div>}\n            {error && queryValue && <div>{error}</div>}\n        </>\n    );\n};\n\nexport default Movies;","import axios from \"axios\";\nimport { abortControllerHome } from \"pages/Home\";\nimport { abortControllerMovies } from \"pages/Movies\";\nimport { abortControllerSearchedMovies } from \"pages/MovieDetails\";\nimport { abortControllerCast } from \"components/Cast/Cast\";\nimport { abortControllerReviews } from \"components/Reviews/Reviews\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1031ac21012605f271b16d5645868876';\n\nexport async function fetchTrendingMovies() {\n    const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n        params: {\n            api_key: API_KEY,\n            page: 1,\n            signal: abortControllerHome.signal\n        }\n    });\n\n    return response.data;\n};\n\nexport async function fetchMovie(id) {\n    const response = await axios.get(`${BASE_URL}/movie/${id}`, {\n        params: {\n            api_key: API_KEY,\n            signal: abortControllerMovies.signal\n        }\n    });\n\n    return response.data;\n};\n\nexport async function fetchSearchedMovies(searchValue) {\n    const response = await axios.get(`${BASE_URL}/search/movie`, {\n        params: {\n            api_key: API_KEY,\n            query: `${searchValue}`,\n            signal: abortControllerSearchedMovies.signal\n        }\n    });\n\n    return response.data;\n};\n\nexport async function fetchCast(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/credits`, {\n        params: {\n            api_key: API_KEY,\n            signal: abortControllerCast.signal\n        }\n    });\n\n    return response.data;\n};\n\nexport async function fetchReviews(movieId) {\n    const response = await axios.get(`${BASE_URL}/movie/${movieId}/reviews`, {\n        params: {\n            api_key: API_KEY,\n            signal: abortControllerReviews.signal\n        }\n    });\n\n    return response.data;\n};\n"],"names":["CastList","lazy","abortControllerCast","AbortController","useState","cast","setCast","error","setError","id","useParams","useEffect","fetchCast","fetchedCast","length","Error","message","fetchMovieCast","abort","ReviewsList","abortControllerReviews","reviews","setReviews","fetchReviews","fetchedReviews","results","fetchMovieReviews","TrendingMoviesList","abortControllerHome","trendingMovies","setTrendingMovies","location","useLocation","fetchTrendingMovies","movies","fetchMovies","fetchSearchedMovies","MovieInfo","abortControllerSearchedMovies","movie","setMovie","loading","setLoading","fetchMovie","fetchMovieById","movieDetails","SearchBar","SearchedMovies","abortControllerMovies","fetchedMovies","setFetchedMovies","queryMovie","setQueryMovie","useSearchParams","searchParams","setSearchParams","queryValue","get","searchedMoviesList","onFormSubmit","inputValue","query","moviesList","BASE_URL","API_KEY","axios","params","api_key","page","signal","response","data","searchValue","movieId"],"sourceRoot":""}